package com.shao.jobsnaps.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shao.jobsnaps.pojo.Files;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILES".
*/
public class FilesDao extends AbstractDao<Files, Long> {

    public static final String TABLENAME = "FILES";

    /**
     * Properties of entity Files.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FId = new Property(0, Long.class, "fId", true, "_id");
        public final static Property ProId = new Property(1, Long.class, "proId", false, "PRO_ID");
        public final static Property FNm = new Property(2, String.class, "fNm", false, "F_NM");
        public final static Property FDs = new Property(3, String.class, "fDs", false, "F_DS");
        public final static Property FPriority = new Property(4, int.class, "fPriority", false, "F_PRIORITY");
        public final static Property FTime = new Property(5, java.util.Date.class, "fTime", false, "F_TIME");
        public final static Property FTag = new Property(6, String.class, "fTag", false, "F_TAG");
        public final static Property FUrl = new Property(7, String.class, "fUrl", false, "F_URL");
        public final static Property FType = new Property(8, String.class, "fType", false, "F_TYPE");
        public final static Property FUper = new Property(9, Long.class, "fUper", false, "F_UPER");
        public final static Property FFather = new Property(10, Long.class, "fFather", false, "F_FATHER");
        public final static Property Flag = new Property(11, boolean.class, "flag", false, "FLAG");
    }


    public FilesDao(DaoConfig config) {
        super(config);
    }
    
    public FilesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: fId
                "\"PRO_ID\" INTEGER," + // 1: proId
                "\"F_NM\" TEXT," + // 2: fNm
                "\"F_DS\" TEXT," + // 3: fDs
                "\"F_PRIORITY\" INTEGER NOT NULL ," + // 4: fPriority
                "\"F_TIME\" INTEGER," + // 5: fTime
                "\"F_TAG\" TEXT," + // 6: fTag
                "\"F_URL\" TEXT," + // 7: fUrl
                "\"F_TYPE\" TEXT," + // 8: fType
                "\"F_UPER\" INTEGER," + // 9: fUper
                "\"F_FATHER\" INTEGER," + // 10: fFather
                "\"FLAG\" INTEGER NOT NULL );"); // 11: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Files entity) {
        stmt.clearBindings();
 
        Long fId = entity.getFId();
        if (fId != null) {
            stmt.bindLong(1, fId);
        }
 
        Long proId = entity.getProId();
        if (proId != null) {
            stmt.bindLong(2, proId);
        }
 
        String fNm = entity.getFNm();
        if (fNm != null) {
            stmt.bindString(3, fNm);
        }
 
        String fDs = entity.getFDs();
        if (fDs != null) {
            stmt.bindString(4, fDs);
        }
        stmt.bindLong(5, entity.getFPriority());
 
        java.util.Date fTime = entity.getFTime();
        if (fTime != null) {
            stmt.bindLong(6, fTime.getTime());
        }
 
        String fTag = entity.getFTag();
        if (fTag != null) {
            stmt.bindString(7, fTag);
        }
 
        String fUrl = entity.getFUrl();
        if (fUrl != null) {
            stmt.bindString(8, fUrl);
        }
 
        String fType = entity.getFType();
        if (fType != null) {
            stmt.bindString(9, fType);
        }
 
        Long fUper = entity.getFUper();
        if (fUper != null) {
            stmt.bindLong(10, fUper);
        }
 
        Long fFather = entity.getFFather();
        if (fFather != null) {
            stmt.bindLong(11, fFather);
        }
        stmt.bindLong(12, entity.getFlag() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Files entity) {
        stmt.clearBindings();
 
        Long fId = entity.getFId();
        if (fId != null) {
            stmt.bindLong(1, fId);
        }
 
        Long proId = entity.getProId();
        if (proId != null) {
            stmt.bindLong(2, proId);
        }
 
        String fNm = entity.getFNm();
        if (fNm != null) {
            stmt.bindString(3, fNm);
        }
 
        String fDs = entity.getFDs();
        if (fDs != null) {
            stmt.bindString(4, fDs);
        }
        stmt.bindLong(5, entity.getFPriority());
 
        java.util.Date fTime = entity.getFTime();
        if (fTime != null) {
            stmt.bindLong(6, fTime.getTime());
        }
 
        String fTag = entity.getFTag();
        if (fTag != null) {
            stmt.bindString(7, fTag);
        }
 
        String fUrl = entity.getFUrl();
        if (fUrl != null) {
            stmt.bindString(8, fUrl);
        }
 
        String fType = entity.getFType();
        if (fType != null) {
            stmt.bindString(9, fType);
        }
 
        Long fUper = entity.getFUper();
        if (fUper != null) {
            stmt.bindLong(10, fUper);
        }
 
        Long fFather = entity.getFFather();
        if (fFather != null) {
            stmt.bindLong(11, fFather);
        }
        stmt.bindLong(12, entity.getFlag() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Files readEntity(Cursor cursor, int offset) {
        Files entity = new Files( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // fId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // proId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fNm
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fDs
            cursor.getInt(offset + 4), // fPriority
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // fTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fTag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fType
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // fUper
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // fFather
            cursor.getShort(offset + 11) != 0 // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Files entity, int offset) {
        entity.setFId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFNm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFDs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFPriority(cursor.getInt(offset + 4));
        entity.setFTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFUper(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setFFather(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setFlag(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Files entity, long rowId) {
        entity.setFId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Files entity) {
        if(entity != null) {
            return entity.getFId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Files entity) {
        return entity.getFId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
