package com.shao.jobsnaps.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shao.jobsnaps.pojo.Projects;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECTS".
*/
public class ProjectsDao extends AbstractDao<Projects, Long> {

    public static final String TABLENAME = "PROJECTS";

    /**
     * Properties of entity Projects.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProId = new Property(0, Long.class, "proId", true, "_id");
        public final static Property TId = new Property(1, Long.class, "tId", false, "T_ID");
        public final static Property ProNm = new Property(2, String.class, "proNm", false, "PRO_NM");
        public final static Property ProDs = new Property(3, String.class, "proDs", false, "PRO_DS");
        public final static Property ProCt = new Property(4, java.util.Date.class, "proCt", false, "PRO_CT");
        public final static Property Creater = new Property(5, Long.class, "creater", false, "CREATER");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property FNum = new Property(7, int.class, "fNum", false, "F_NUM");
    }


    public ProjectsDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: proId
                "\"T_ID\" INTEGER," + // 1: tId
                "\"PRO_NM\" TEXT," + // 2: proNm
                "\"PRO_DS\" TEXT," + // 3: proDs
                "\"PRO_CT\" INTEGER," + // 4: proCt
                "\"CREATER\" INTEGER," + // 5: creater
                "\"URL\" TEXT," + // 6: url
                "\"F_NUM\" INTEGER NOT NULL );"); // 7: fNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Projects entity) {
        stmt.clearBindings();
 
        Long proId = entity.getProId();
        if (proId != null) {
            stmt.bindLong(1, proId);
        }
 
        Long tId = entity.getTId();
        if (tId != null) {
            stmt.bindLong(2, tId);
        }
 
        String proNm = entity.getProNm();
        if (proNm != null) {
            stmt.bindString(3, proNm);
        }
 
        String proDs = entity.getProDs();
        if (proDs != null) {
            stmt.bindString(4, proDs);
        }
 
        java.util.Date proCt = entity.getProCt();
        if (proCt != null) {
            stmt.bindLong(5, proCt.getTime());
        }
 
        Long creater = entity.getCreater();
        if (creater != null) {
            stmt.bindLong(6, creater);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getFNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Projects entity) {
        stmt.clearBindings();
 
        Long proId = entity.getProId();
        if (proId != null) {
            stmt.bindLong(1, proId);
        }
 
        Long tId = entity.getTId();
        if (tId != null) {
            stmt.bindLong(2, tId);
        }
 
        String proNm = entity.getProNm();
        if (proNm != null) {
            stmt.bindString(3, proNm);
        }
 
        String proDs = entity.getProDs();
        if (proDs != null) {
            stmt.bindString(4, proDs);
        }
 
        java.util.Date proCt = entity.getProCt();
        if (proCt != null) {
            stmt.bindLong(5, proCt.getTime());
        }
 
        Long creater = entity.getCreater();
        if (creater != null) {
            stmt.bindLong(6, creater);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getFNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Projects readEntity(Cursor cursor, int offset) {
        Projects entity = new Projects( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // proId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // proNm
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // proDs
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // proCt
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // creater
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.getInt(offset + 7) // fNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Projects entity, int offset) {
        entity.setProId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProNm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProDs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProCt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCreater(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFNum(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Projects entity, long rowId) {
        entity.setProId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Projects entity) {
        if(entity != null) {
            return entity.getProId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Projects entity) {
        return entity.getProId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
