package com.shao.jobsnaps.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shao.jobsnaps.pojo.Join;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOIN".
*/
public class JoinDao extends AbstractDao<Join, Long> {

    public static final String TABLENAME = "JOIN";

    /**
     * Properties of entity Join.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property JId = new Property(0, Long.class, "jId", true, "_id");
        public final static Property TId = new Property(1, Long.class, "tId", false, "T_ID");
        public final static Property UId = new Property(2, Long.class, "uId", false, "U_ID");
        public final static Property JCt = new Property(3, java.util.Date.class, "jCt", false, "J_CT");
    }


    public JoinDao(DaoConfig config) {
        super(config);
    }
    
    public JoinDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: jId
                "\"T_ID\" INTEGER," + // 1: tId
                "\"U_ID\" INTEGER," + // 2: uId
                "\"J_CT\" INTEGER);"); // 3: jCt
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_JOIN_T_ID ON \"JOIN\"" +
                " (\"T_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_JOIN_U_ID ON \"JOIN\"" +
                " (\"U_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Join entity) {
        stmt.clearBindings();
 
        Long jId = entity.getJId();
        if (jId != null) {
            stmt.bindLong(1, jId);
        }
 
        Long tId = entity.getTId();
        if (tId != null) {
            stmt.bindLong(2, tId);
        }
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(3, uId);
        }
 
        java.util.Date jCt = entity.getJCt();
        if (jCt != null) {
            stmt.bindLong(4, jCt.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Join entity) {
        stmt.clearBindings();
 
        Long jId = entity.getJId();
        if (jId != null) {
            stmt.bindLong(1, jId);
        }
 
        Long tId = entity.getTId();
        if (tId != null) {
            stmt.bindLong(2, tId);
        }
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(3, uId);
        }
 
        java.util.Date jCt = entity.getJCt();
        if (jCt != null) {
            stmt.bindLong(4, jCt.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Join readEntity(Cursor cursor, int offset) {
        Join entity = new Join( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // jId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // uId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // jCt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Join entity, int offset) {
        entity.setJId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setJCt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Join entity, long rowId) {
        entity.setJId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Join entity) {
        if(entity != null) {
            return entity.getJId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Join entity) {
        return entity.getJId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
